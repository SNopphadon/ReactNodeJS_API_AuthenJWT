{"ast":null,"code":"import _regeneratorRuntime from\"D:/Users/92740518/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/Users/92740518/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var express=require('express');var cors=require('cors');var app=express();var bodyParser=require('body-parser');var jsonParser=bodyParser.json();var bcrypt=require('bcrypt');var saltRounds=10;var jwt=require('jsonwebtoken');var secret='@2G4#Y7!t0z2$4S6&8*01P3KA%7BN1X3';app.use(cors());var sql=require('mssql');var config={user:'ac_api',password:'@cipa2023',server:'ahthkab20vt',// You can use 'localhost\\\\instance' to connect to named instance\ndatabase:'AccountAPI',options:{encrypt:true,// Use encryption for security (if needed)\ntrustServerCertificate:true// Ignore SSL validation\n}};//POST API\napp.post('/register',jsonParser,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(req,res){var pool,salt,hash,result;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return sql.connect(config);case 3:pool=_context.sent;_context.next=6;return bcrypt.genSalt(saltRounds);case 6:salt=_context.sent;_context.next=9;return bcrypt.hash(req.body.password,salt);case 9:hash=_context.sent;_context.next=12;return pool.request().input('email',sql.VarChar,req.body.email).input('password',sql.Text,hash).input('fname',sql.VarChar,req.body.fname).input('lname',sql.VarChar,req.body.lname).query('INSERT INTO tb_account (email, password, fname, lname) VALUES (@email, @password, @fname, @lname)');case 12:result=_context.sent;sql.close();// Close the connection\n// Send a response\nres.json({status:'ok'});_context.next=21;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](0);console.error('Error inserting data:',_context.t0);res.status(500).json({message:'An error occurred'});case 21:case\"end\":return _context.stop();}},_callee,null,[[0,17]]);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());app.post('/login',jsonParser,/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req,res){var pool,result,hashedPasswordFromDB,passwordMatch,token;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return sql.connect(config);case 3:pool=_context2.sent;_context2.next=6;return pool.request().input('email',sql.VarChar,req.body.email).query('SELECT password FROM tb_account WHERE email = @email');case 6:result=_context2.sent;if(!(result.recordset.length===0)){_context2.next=10;break;}// No user found with the given email\nres.status(401).json({message:'Invalid email or password'});return _context2.abrupt(\"return\");case 10:hashedPasswordFromDB=result.recordset[0].password;// Compare the provided password with the hashed password from the database\n_context2.next=13;return bcrypt.compare(req.body.password,hashedPasswordFromDB);case 13:passwordMatch=_context2.sent;if(passwordMatch){_context2.next=17;break;}// Passwords do not match\nres.status(401).json({message:'Invalid email or password'});return _context2.abrupt(\"return\");case 17:token=jwt.sign({email:req.body.email},secret,{expiresIn:'1h'});// Passwords match, user is authenticated\nres.json({status:'ok',token:token});_context2.next=25;break;case 21:_context2.prev=21;_context2.t0=_context2[\"catch\"](0);console.error('Error during login:',_context2.t0);res.status(500).json({message:'An error occurred'});case 25:case\"end\":return _context2.stop();}},_callee2,null,[[0,21]]);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}());app.post('/authen',jsonParser,function(req,res){try{var token=req.headers.authorization.split(' ')[1];var decoded=jwt.verify(token,secret);res.json({status:'ok',decoded:decoded});res.json({decoded:decoded});}catch(err){res.json({status:'error',message:err.message});}});app.listen(3333,function(){console.log('CORS-enabled web server listening on port 3333');});","map":{"version":3,"names":["express","require","cors","app","bodyParser","jsonParser","json","bcrypt","saltRounds","jwt","secret","use","sql","config","user","password","server","database","options","encrypt","trustServerCertificate","post","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","req","res","pool","salt","hash","result","wrap","_callee$","_context","prev","next","connect","sent","genSalt","body","request","input","VarChar","email","Text","fname","lname","query","close","status","t0","console","error","message","stop","_x","_x2","apply","arguments","_ref2","_callee2","hashedPasswordFromDB","passwordMatch","token","_callee2$","_context2","recordset","length","abrupt","compare","sign","expiresIn","_x3","_x4","headers","authorization","split","decoded","verify","err","listen","log"],"sources":["D:/project_for_course/Login_API/src/app.js"],"sourcesContent":["var express = require('express')\r\nvar cors = require('cors')\r\nvar app = express()\r\nvar bodyParser = require('body-parser')\r\nvar jsonParser = bodyParser.json()\r\nconst bcrypt = require('bcrypt');\r\nconst saltRounds = 10;\r\nvar jwt = require('jsonwebtoken');\r\nconst secret = '@2G4#Y7!t0z2$4S6&8*01P3KA%7BN1X3'\r\n\r\napp.use(cors())\r\nconst sql = require('mssql')\r\nconst config = {\r\n    user: 'ac_api',\r\n    password: '@cipa2023',\r\n    server: 'ahthkab20vt', // You can use 'localhost\\\\instance' to connect to named instance\r\n    database: 'AccountAPI',\r\n    options: {\r\n        encrypt: true, // Use encryption for security (if needed)\r\n        trustServerCertificate: true, // Ignore SSL validation\r\n    },\r\n}\r\n\r\n\r\n//POST API\r\napp.post('/register', jsonParser, async (req, res) => {\r\n    try {\r\n        // Connect to the database\r\n        const pool = await sql.connect(config);\r\n\r\n        // Hash the password\r\n        const salt = await bcrypt.genSalt(saltRounds);\r\n        const hash = await bcrypt.hash(req.body.password, salt);\r\n\r\n        // Perform the INSERT operation\r\n        const result = await pool\r\n            .request()\r\n            .input('email', sql.VarChar, req.body.email)\r\n            .input('password', sql.Text, hash)\r\n            .input('fname', sql.VarChar, req.body.fname)\r\n            .input('lname', sql.VarChar, req.body.lname)\r\n            .query('INSERT INTO tb_account (email, password, fname, lname) VALUES (@email, @password, @fname, @lname)');\r\n        \r\n        sql.close(); // Close the connection\r\n\r\n        // Send a response\r\n        res.json({ status: 'ok' });\r\n\r\n    } catch (error) {\r\n        console.error('Error inserting data:', error);\r\n        res.status(500).json({ message: 'An error occurred' });\r\n    }\r\n});\r\n\r\napp.post('/login', jsonParser, async (req, res) => {\r\n    try {\r\n        // Connect to the database\r\n        const pool = await sql.connect(config);\r\n\r\n        // Retrieve user's record by email\r\n        const result = await pool\r\n            .request()\r\n            .input('email', sql.VarChar, req.body.email)\r\n            .query('SELECT password FROM tb_account WHERE email = @email');\r\n        \r\n        if (result.recordset.length === 0) {\r\n            // No user found with the given email\r\n            res.status(401).json({ message: 'Invalid email or password' });\r\n            return;\r\n        }\r\n\r\n        const hashedPasswordFromDB = result.recordset[0].password;\r\n\r\n        // Compare the provided password with the hashed password from the database\r\n        const passwordMatch = await bcrypt.compare(req.body.password, hashedPasswordFromDB);\r\n\r\n        if (!passwordMatch) {\r\n            // Passwords do not match\r\n            res.status(401).json({ message: 'Invalid email or password' });\r\n            return;\r\n        }\r\n        var token = jwt.sign({ email: req.body.email }, secret,{ expiresIn: '1h' });\r\n        // Passwords match, user is authenticated\r\n        res.json({status:'ok',token });\r\n\r\n    } catch (error) {\r\n        console.error('Error during login:', error);\r\n        res.status(500).json({ message: 'An error occurred' });\r\n    }\r\n});\r\n\r\napp.post('/authen', jsonParser, (req, res) => {\r\n    try{\r\n        const token = req.headers.authorization.split(' ')[1]\r\n        var decoded = jwt.verify(token, secret);\r\n        res.json({status:'ok',decoded})\r\n        res.json({decoded})\r\n    }catch(err){\r\n        res.json({status:'error',message: err.message})\r\n    }\r\n\r\n})\r\n\r\n \r\napp.listen(3333, function () {\r\n   console.log('CORS-enabled web server listening on port 3333')\r\n })"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}